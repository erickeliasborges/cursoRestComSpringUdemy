<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Apache Camel K 1.0 is here - Why should you care</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9pfCGtn2LMs/apache-camel-k-10-is-here-why-should.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="camelk" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-apache_camel_k_1_0_is_here_why_should_you_care</id><updated>2020-06-10T12:51:42Z</updated><published>2020-06-10T12:51:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Yesterday we released Apache Camel K 1.0 and it was announced on social media and on the Camel website.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-pR00B9yyG-A/XuDPVAWVljI/AAAAAAAACL8/34TAMqn0VHcI_zUi8bhP5-P3cGmxijTdwCLcBGAsYHQ/s1600/Screenshot%2B2020-06-09%2Bat%2B20.46.38.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="426" data-original-width="1169" height="145" src="https://1.bp.blogspot.com/-pR00B9yyG-A/XuDPVAWVljI/AAAAAAAACL8/34TAMqn0VHcI_zUi8bhP5-P3cGmxijTdwCLcBGAsYHQ/s400/Screenshot%2B2020-06-09%2Bat%2B20.46.38.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;So what is Camel K and why should you care? That is a great question and I want to help answer this by referring to great minds.&lt;br /&gt;&lt;br /&gt;Hugo Guerrero posted the &lt;a href="https://twitter.com/hguerreroo/status/1270471245813907463?s=20"&gt;following tweet&lt;/a&gt; &amp;nbsp; &lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://twitter.com/hguerreroo/status/1270471245813907463?s=20"&gt;&lt;img border="0" data-original-height="107" data-original-width="559" height="76" src="https://1.bp.blogspot.com/-_iQRpqOkJBc/XuDQJpydziI/AAAAAAAACMI/_EhBEuh64CMERITk98fi2LOFKjMHFBB4ACLcBGAsYHQ/s400/Screenshot%2B2020-06-10%2Bat%2B14.16.25.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;That is a powerful statement from Hugo, where he highlights the groundbreaking innovation from Camel K, that gives developers the tools and means to build Java based services that are both serverless and functional and runs using standard Kubernetes building blocks.&lt;br /&gt;&lt;br /&gt;Camel K is the biggest innovation in Apache Camel for the last 10 years. So fill your cup with coffee or tea, and sit back and enjoy the next 10 minutes read.&lt;br /&gt;&lt;br /&gt;I give the floor to Nicola Ferraro (co-creator of Camel K) whom have allowed me to re-post his blog post from the announcement yesterday.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Apache Camel K has made a lot of progress since its inception and we're now proud to announce the 1.0 release. We've been working hard in the past months to add more awesome features to Camel K, but also to improve stability and performance. This post contains a list of cool stuff that you'll find in the 1.0 GA release.&lt;br /&gt;&lt;br /&gt;First of all, if you're living under a rock and it's the first time you hear about Camel K,&lt;br /&gt;you can read some introductory blog posts here (&lt;a href="https://nicolaferraro.me/2018/10/15/introducing-camel-k/"&gt;1 - introducing Camel K&lt;/a&gt;) (&lt;a href="https://www.nicolaferraro.me/2018/12/10/camel-k-on-knative"&gt;2 - camel k on knative&lt;/a&gt;)&lt;br /&gt;or look at the Apache Camel website that contains a &lt;a href="https://camel.apache.org/camel-k/latest/"&gt;Camel K section&lt;/a&gt;&lt;br /&gt;with a lot of material that is automatically generated from the &lt;a href="https://github.com/apache/camel-k"&gt;Github repository&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;User experience&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Camel K development style is minimalistic: you need just to write a single file with your integration routes and you can immediately run them on any Kubernetes cluster. This way of defining things is common to many FaaS platforms (although Camel K is not a proper FaaS platform, but a lightweight integration platform) and it's technically difficult to provide IDE support, such as code completion and other utilities, to developers.&lt;br /&gt;&lt;br /&gt;But now we've it. The integration tooling team has created some cool extensions for VS Code that make the development experience with Camel K even more exciting.&lt;br /&gt;You don't need to remember the Camel DSL syntax, the IDE will give you suggestions and error highlighting.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-K_G7PxgJl_c/XuDSh87YHRI/AAAAAAAACMU/XR9vouL-2dUa98TMnV9stsC8PFyYyLNqACLcBGAsYHQ/s1600/ide-autocompletion.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="563" data-original-width="852" height="263" src="https://1.bp.blogspot.com/-K_G7PxgJl_c/XuDSh87YHRI/AAAAAAAACMU/XR9vouL-2dUa98TMnV9stsC8PFyYyLNqACLcBGAsYHQ/s400/ide-autocompletion.gif" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Code completion works with Java code, but it's not only limited to it: you also have suggestions and documentation out of the box when writing the Camel URIs and property files.&lt;br /&gt;And you also have many options to run integrations and interact with them, all integrated in the IDE.&lt;br /&gt;&lt;br /&gt;Just install the VS Code &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.apache-camel-extension-pack"&gt;Extension Pack for Apache Camel&lt;/a&gt;&amp;nbsp;to have all these features available.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Getting started tutorials&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Good tools are fundamental to have a great development experience with Camel K, but then you need to learn what you can do with such a great power.&lt;br /&gt;We've created a new repository in the Apache organization that hosts getting started examples: the &lt;a href="https://github.com/apache/camel-k-examples"&gt;camel-k-examples&lt;/a&gt; repository.&lt;br /&gt;&lt;br /&gt;So far we've added guides that drive you through:&lt;br /&gt;&lt;br /&gt;- &lt;a href="https://github.com/apache/camel-k-examples/tree/master/01-basic"&gt;01 Basic&lt;/a&gt;: Learn the basics of Camel K and some interesting use cases&lt;br /&gt;- &lt;a href="https://github.com/apache/camel-k-examples/tree/master/02-serverless-api"&gt;02 Serverless APIs&lt;/a&gt;: How to design a serverless (i.e. auto-scaling, scaling to zero) API and run it in a few minutes&lt;br /&gt;&lt;br /&gt;The basic quickstart is &lt;a href="https://learn.openshift.com/middleware/courses/middleware-camelk/camel-k-basic"&gt;also available online&lt;/a&gt;, so you can have a look at how camel k works &lt;b&gt;without installing anything on your laptop&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;More tutorials are expected to come in the following months. You are also welcome if you want to help us by contributing your own. They are based on the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-didact"&gt;VSCode Didact&lt;/a&gt; project, that provides an&lt;br /&gt;awesome user experience.&lt;br /&gt;&lt;br /&gt;If you are looking for Camel K code samples that you can just pick and run using the CLI, the &lt;a href="https://github.com/apache/camel-k/tree/master/examples"&gt;examples directory&lt;/a&gt;&amp;nbsp;of the Camel K main repository contains a lot of them. You can also run them directly from Github:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;kamel run https://raw.githubusercontent.com/apache/camel-k/master/examples/Sample.java&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;You can find ready-to-use examples written in different languages (e.g. &lt;a href="https://github.com/apache/camel-k/blob/5fb589090c2f45b28aef586118df48fad8838b3f/examples/hello.xml"&gt;XML&lt;/a&gt;, &lt;a href="https://github.com/apache/camel-k/blob/5fb589090c2f45b28aef586118df48fad8838b3f/examples/simple.js"&gt;JavaScript&lt;/a&gt; and others).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Serverless&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Serverless is the most important area where we're focusing the new developments in Apache Camel K, although, you should remember, you can have a wonderful Camel K experience even without serverless features. To enable the serverless profile in Camel K, you just need to have &lt;a href="https://knative.dev/"&gt;Knative&lt;/a&gt; installed.&lt;br /&gt;&lt;br /&gt;In recent releases, we have added support for the most recent advancements in Knative, for example, Camel K is very well integrated with the Knative event broker and you can easily produce or consume events from it.&lt;br /&gt;&lt;br /&gt;With &lt;b&gt;2 lines of code&lt;/b&gt; you can transfer events (e.g. generated by IoT devices) from your MQTT broker to the mesh:&lt;br /&gt;&lt;br /&gt;&lt;i&gt;bridge.groovy&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;from('paho:mytopic?brokerUrl=tcp://broker-address:1883&amp;amp;clientId=knative-bridge')&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; .to('knative:event/device-event')&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;No kidding, you just need to write those two lines of code in a file and run it with &lt;span style="font-family: Courier New, Courier, monospace;"&gt;kamel run bridge.groovy&lt;/span&gt; to push data into the Knative broker.&lt;br /&gt;&lt;br /&gt;And you can also scale the Integration out (Integration is a Kubernetes custom resource, &lt;span style="font-family: Courier New, Courier, monospace;"&gt;kubectl get integrations&lt;/span&gt; to see all of them)&lt;br /&gt;to have a higher throughput. Scaling here is manual because the source of events is a MQTT broker (but we've plans to put &lt;a href="https://github.com/apache/camel-k/issues/1107)"&gt;auto-scaling also in this scenario&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The Camel K embedded auto-scaling feature works really well when you want to react to some Knative events:&lt;br /&gt;&lt;br /&gt;&lt;i&gt;listener.groovy&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;from('knative:event/device-event')&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; .to('http://myhost/webhook/random-id')&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This integration is configured to receive all events with `type=device-event` and scales automatically with the load because it is materialized into a &lt;a href="https://knative.dev/docs/serving/spec/knative-api-specification-1.0/#service"&gt;Knative Serving Service&lt;/a&gt;&amp;nbsp;and automatically subscribed to the &lt;a href="https://knative.dev/docs/eventing/broker/"&gt;Eventing Broker&lt;/a&gt; via a Trigger.&lt;br /&gt;&lt;br /&gt;It then receives a &lt;a href="https://cloudevents.io/"&gt;CloudEvent&lt;/a&gt; when your IoT devices produce something and scales down to zero if there's no data coming. You just need to create it (as before, just &lt;span style="font-family: Courier New, Courier, monospace;"&gt;kamel run listener.groovy&lt;/span&gt;), all the remaining configuration is done &lt;b&gt;automatically by the Camel K operator&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;We've added much more features for having a better integration with the Knative ecosystem and we've also fixed some compatibility and performance issues that were present in previous versions. The user experience is now much smoother.&lt;br /&gt;&lt;br /&gt;If you are a Knative YAML developer (!), instead of using Camel K directly, you also have the option to use &lt;a href="https://knative.dev/docs/eventing/samples/apache-camel-source/"&gt;Knative Camel Sources&lt;/a&gt; which are part of the Knative release. They are wrappers for Camel K integrations that are compatible with all the tools used by Knative developers (such as the kn CLI or the OpenShift serverless console).&lt;br /&gt;Sources in Knative can only push data into the various Knative endpoints, but not the other way around (i.e. they cannot be used to publish data from Knative to the outside).&lt;br /&gt;In Camel K you don't have this limitation: the Route is the fundamental building block of a Camel integration and you can do whatever you want with it.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Fast startup and low memory&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;We cannot say we're serverless without mentioning the work that we've been doing in improving the performance of Camel K integrations.&lt;br /&gt;&lt;br /&gt;Starting from Camel 3.3.0 which is the default version used by Camel K 1.0.0, you can benefit from all improvements that have been made directly in the Camel core to make it much more lightweight. More in depth details of the Camel core improvements can be found the following blog series that highlights what has been changed in the 3.x Camel timeline to reduce memory footprint and speedup the startup time, which is fundamental when running integrations in a serverless environment: &lt;a href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core.html?m=1"&gt;part 1&lt;/a&gt;, &lt;a href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core_30.html?m=1"&gt;part 2&lt;/a&gt;&amp;nbsp; &lt;a href="http://www.davsclaus.com/2020/02/apache-camel-31-more-camel-core.html?m=1"&gt;part 3&lt;/a&gt;, &lt;a href="http://www.davsclaus.com/2020/03/apache-camel-32-reflection-free.html?m=1"&gt;part 4&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;But improvements are not only limited to the Camel core: we're doing much more. Several months ago we've started a new subproject of Apache Camel named &lt;a href="https://github.com/apache/camel-quarkus"&gt;Camel Quarkus&lt;/a&gt; with the goal of seamlessly running integrations on top of the Quarkus framework. As you probably know, Quarkus is able to reduce the memory footprint of Java applications and improve the startup time, because it moves much startup logic to the build phase. And Quarkus applications can also be compiled to a native binary, allowing a dramatic improvements in startup performance and very low memory footprint.&lt;br /&gt;&lt;br /&gt;In Camel K 1.0.0 we support Camel Quarkus in JVM mode. A goal is to have also the in-cluster native compilation soon (for some DSL languages, such as YAML), in one of next releases!&lt;br /&gt;&lt;br /&gt;To use Quarkus as underlying runtime, you just need to enable the &lt;a href="https://camel.apache.org/camel-k/latest/traits/quarkus.html"&gt;Quarkus trait&lt;/a&gt; when running an integration:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;kamel run myintegration.groovy -t quarkus.enabled=true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Quarkus is expected to be the default underlying runtime in the next release, and support for Standalone mode (via camel-main) will be deprecated and removed. This means that you won't need to enable Quarkus manually in the next releases, but you still need to do it in 1.0.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Fast build time&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Every application running on Kubernetes needs to be packaged in a container image, but in Camel K you only provide the integration DSL and the operator does what it takes to run it, including building images directly in the cluster.&lt;br /&gt;&lt;br /&gt;The operator manages a pool of reusable container images and if you redeploy your integration code, it does try to reuse existing images from the pool rather than building a new one at each change, because it takes some time to build a new one. It was 1 minute at the beginning...&lt;br /&gt;&lt;br /&gt;But Kubernetes is moving so fast that you cannot solve a problem once and forget about it, you need to take care of it continuously. It happened that some of our third party dependencies that we used for doing builds in "vanilla Kube" has slowly degraded in performance up to a point where Camel K user experience was highly affected.&lt;br /&gt;&lt;br /&gt;We decided to work harder on the build system in order to dramatically improve (again!) the build phase of Camel K integrations.&lt;br /&gt;&lt;br /&gt;Build time can be be now measured in seconds in dev environments such as Minikube. A bunch of seconds, most of the times. This is more than a simple improvement!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Better CLI&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The 'kamel' CLI is the main tool we provide to developers to run integrations. It's not a mandatory requirement: at the end, an Integration is a Kubernetes custom resources and you can manage it with any Kubernetes standard tool (e.g. kubectl). But the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;kamel&lt;/span&gt; CLI adds a lot of value for integration developers.&lt;br /&gt;&lt;br /&gt;For example, if you're a Camel Java developer it's not super easy to remember the boilerplate that you have to write in order to instantiate a Camel route builder. Now you don't have to remember that:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;kamel init Handler.java&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;You get a Java file with all the boilerplate written for you and you just have to write your integration routes.&lt;br /&gt;&lt;br /&gt;It works also with all other languages: Groovy, XML, YAML, Kotlin and JavaScript.&lt;br /&gt;For example you can write:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;kamel init foo.js&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;This way you get a simple route written in JavaScript.&lt;br /&gt;&lt;br /&gt;It's not just that. Often Camel K developers need to add a lot of command line options to configure the final behavior of their integration. For example, you may want to add a custom library with the `-d` option or configure a trait with `-t`. E.g.:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;kamel run -d mvn:org.my:lib:1.0.0 -d mvn:org.my:otherlib:2.0.0 -t quarkus.enabled=true Handler.java&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Sometimes the number of command line parameters you've to add can become too many. For this reason we've added the possibility to specify them as modeline options in the integration file (done by adding a comment line with `camel-k:` as prefix).&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Handler.java&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;// camel-k: dependency=mvn:org.my:lib:1.0.0 dependency=mvn:org.my:otherlib:2.0.0 trait=quarkus.enabled=true&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;// ...&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;// your routes here&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Once the options are written in the file, you can run the routes with just:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;// simply this, additional args are read from the file&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;kamel run Handler.java&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The other options are taken automatically from the file modeline. The CLI also displays the full command to let you know what's running.&lt;br /&gt;&lt;br /&gt;This kind of configuration is extremely useful in CI/CD scenarios because it allows you to have self-contained integration files and you don't need to change the pipeline to setup additional options. If you're curious about the CI/CD configurations, you can follow the &lt;a href="https://camel.apache.org/camel-k/latest/tutorials/tekton/tekton.html"&gt;tutorial about Tekton pipelines&lt;/a&gt; to have more information.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Monitoring and Tracing&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Ok, you've finished level 1 of Camel K development and you want to make serious things. You're in a very good position because Camel K provides a lot of useful tools to add visibility on what your integration routes are doing.&lt;br /&gt;&lt;br /&gt;Let's suppose you've a &lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt;&amp;nbsp;instance in your namespace and you want to publish your integration metrics:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;kamel run Routes.java -t prometheus.enabled=true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;That's it. No need to setup services a labels to enable scraping. A default prometheus configuration file is also provided for the integration, with sensible defaults. Of course you also have the option to provide &lt;a href="https://camel.apache.org/camel-k/latest/traits/prometheus.html"&gt;your own configuration&lt;/a&gt; for advanced use cases.&lt;br /&gt;&lt;br /&gt;Now, let's suppose you want to see what your routes are doing and trace the execution flow of an integration. What you need to do is to install an opentracing compatible application in the namespace, such as &lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt;, and run the integration as:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;kamel run Routes.java -t prometheus.enabled=true -t tracing.enabled=true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;That's it again. The Camel K operator will add the &lt;a href="https://camel.apache.org/components/latest/others/opentracing.html"&gt;camel-opentracing&lt;/a&gt; library and connect it to the Jaeger collector that is available in the namespace. Here again, &lt;a href="https://camel.apache.org/camel-k/latest/traits/tracing.html"&gt;advanced use cases&lt;/a&gt; are supported.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Master routes&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Good old Camel users know why and when master routes are useful, but for those who are not familiar with the term, I'm going to provide a brief explanation.&lt;br /&gt;&lt;br /&gt;Whenever you have an integration route that must be running, at any point in time, in at most one single Camel instance, you need to use a master route. Master routes can be declared by simply prefixing the consumer endpoint by the 'master' keyword and a name that will be used to create a named lock, e.g.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;from('master:mylock:telegram:bots')&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; .to('log:info')&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;It can be used to print all messages that are sent to your Telegram bot. Since the Telegram API support a single consumer only, you can guard the route with a master prefix to have the guarantee that there will be at most only one consumer at any given time.&lt;br /&gt;&lt;br /&gt;If you're wondering how there can be two instances running of you deploy one, well, think just to when you change your code and need to do a rolling update: for some time there'll be two pods running in parallel. In some cases, you may decide to scale your service out but keep only one instance of a particular route among all the pods of your service. Or you may want to embed a master route in a Knative autoscaling service: in this case, the service can scale autonomously based on the load, but there'll be only one telegram consumer at any time.&lt;br /&gt;&lt;br /&gt;Master routes work out of the box in Camel K, you just need to put a prefix in your endpoint uri. A leader election protocol based on Kubernetes APIs resource locks will be automatically configured for you!&lt;br /&gt;&lt;br /&gt;&lt;b&gt;CronJobs&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;All complex enough systems contain several scheduled jobs. This is especially true for that part of the system that handles integration with the outside.&lt;br /&gt;&lt;br /&gt;Ideally, if you need to execute a quick periodic task, say, every two seconds, you would startup an integration with a route based on timer to execute the periodic task. E.g.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;"&gt;from("timer:task?period=2000")&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; .to(this, "businessLogic")&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;But if the period between two executions, instead of 2 seconds ("2000" in the Camel URI, which is measured in milliseconds) is 2 minutes ("120000") or 2 hours ("7200000")?&lt;br /&gt;&lt;br /&gt;You can see that keeping a container with a JVM running for a task that should be executed once every two minutes may be overkill (it is overkill for sure when the period is 2 hours). We live in a time where resources such as memory and CPU are really valuable.&lt;br /&gt;&lt;br /&gt;So the Camel K operator automatically handles this situation by deploying your integration not as a Kubernetes deployment, but as a Kubernetes CronJob. This saves a lot of resources, especially when the period between executions is high. When it's time to run your integration code, a container starts, triggers the execution and then gracefully terminates. Everything is handled automatically by Camel K and Kubernetes.&lt;br /&gt;&lt;br /&gt;There are cases when you don't want this feature to be enabled, for example, when your code makes use of in memory caches that is better to keep between executions. In these cases, you can safely turn off the feature by passing the flag `-t cron.enabled=false` to the `kamel run` command.&lt;br /&gt;&lt;br /&gt;The Cron feature does not only work with the `timer` component. We've also added a &lt;a href="https://camel.apache.org/components/latest/cron-component.html"&gt;cron component&lt;/a&gt; since Camel 3.1 that works really well in combination with the &lt;a href="https://camel.apache.org/camel-k/latest/traits/cron.html"&gt;cron trait&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;So you can also write the cron expression in the route directly:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;from("cron:job?schedule=0/5+*+*+*+?")&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; .to(this, "businessLogic")&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In this case, a new pod with a JVM is started every 5 minutes to execute your scheduled task. For the remaining 4+ minutes you don't use any resource.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Transparency&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Camel K does a lot of work for you when you run your integration code in the cluster and it's possible that you put some errors in the code that can block the deployment process. We've added a lot of visibility on the deployment process that now communicates with the users via Kubernetes events that are printed to the console when you use the CLI.&lt;br /&gt;&lt;br /&gt;This way you're always notified of problems in the code and you can better understand what to fix to make your integration run.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;How to try Camel K 1.0&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The first step is to go to the &lt;a href="https://dist.apache.org/repos/dist/release/camel/camel-k/1.0.0/"&gt;Apache Camel K release page&lt;/a&gt;, download the kamel CLI for your OS and put it in your system path.&lt;br /&gt;&lt;br /&gt;Installation is done usually using the `kamel install` command, but, depending on the kind of Kubernetes cluster you're using, you may need to execute additional configuration steps.&lt;br /&gt;The Camel K documentation contains a section about &lt;a href="https://camel.apache.org/camel-k/latest/installation/installation.html"&gt;installing it on various types of Kubernetes clusters&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;If you have trouble or you need to install it on a particular cluster that is not listed, just reach out in the &lt;a href="https://gitter.im/apache/camel-k"&gt;Gitter chat&lt;/a&gt; and we'll do our best to help you.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Future&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;We've reached version 1.0.0 and this is a great milestone for us. But we are not going to stop now: we've big plans for the future and we'll continue to develop awesome new features.&lt;br /&gt;&lt;br /&gt;We need your help to improve Camel K and we love contributions!&lt;br /&gt;&lt;br /&gt;Join us on:&lt;br /&gt;&lt;br /&gt;- Gitter: &lt;a href="https://gitter.im/apache/camel-k"&gt;https://gitter.im/apache/camel-k&lt;/a&gt;&lt;br /&gt;- GitHub: &lt;a href="https://github.com/apache/camel-k"&gt;https://github.com/apache/camel-k&lt;/a&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=4Dd5F6Ehusk:_uSXF_I1_VM:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=4Dd5F6Ehusk:_uSXF_I1_VM:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=4Dd5F6Ehusk:_uSXF_I1_VM:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=4Dd5F6Ehusk:_uSXF_I1_VM:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=4Dd5F6Ehusk:_uSXF_I1_VM:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=4Dd5F6Ehusk:_uSXF_I1_VM:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=4Dd5F6Ehusk:_uSXF_I1_VM:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/4Dd5F6Ehusk" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9pfCGtn2LMs" height="1" width="1" alt=""/&gt;</content><summary>Yesterday we released Apache Camel K 1.0 and it was announced on social media and on the Camel website. So what is Camel K and why should you care? That is a great question and I want to help answer this by referring to great minds. Hugo Guerrero posted the following tweet   That is a powerful statement from Hugo, where he highlights the groundbreaking innovation from Camel K, that gives developer...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-06-10T12:51:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/4Dd5F6Ehusk/apache-camel-k-10-is-here-why-should.html</feedburner:origLink></entry><entry><title>Off Heap enhancements</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RBUgma6u_Uw/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="off-heap" scheme="searchisko:content:tags" /><category term="storage" scheme="searchisko:content:tags" /><author><name>William Burns</name></author><id>searchisko:content:id:jbossorg_blog-off_heap_enhancements</id><updated>2020-06-09T12:00:00Z</updated><published>2020-06-09T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The off heap implementation in Infinispan has become much more widely used since its introduction. There have been some issues and improvements identified to get this storage type more in line with its heap counterpart. For those of you that are unware the off-heap setting is actually only "off" the JVM heap and still resides in the native memory of the application.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The best part of all the below changes is the user does not need to change anything, other than configuring Off Heap storage.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_resizing_off_heap_container"&gt;&lt;a class="anchor" href="#_resizing_off_heap_container" /&gt;Resizing Off Heap Container&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For those of you that have used/configured off heap storage before you may have noticed that there was a configuration option named address count. This setting allowed you to configure how many address pointers the container had. You can think of this as essentially how many buckets you have in a HashMap. Unfortunately the number of pointers was fixed and therefore the user would have to know how many elements they expected to have.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This setting also had another problem. If the user required a larger size of elements this would increase startup time as the container can be iterated upon multiple times when it is empty. Iterating over a container of one million empty pointers would be much slower than iterating over one of only 1024 for example.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;I am glad to say as of Infinispan 10.0.0.Final this setting and the performance of iteration have been greatly improved.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_configuration"&gt;&lt;a class="anchor" href="#_configuration" /&gt;Configuration&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The address count variable is now ignored and instead the off heap based container will start at smaller amount of "buckets" in the range of 128 or 256. We then apply a load factor of .75, which means we will automatically increase the size of the underlying "buckets" once we have inserted a number of entries being 75% or larger than the current "bucket" size.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The resize operation will grow to have double the amount of "buckets" it had prior. The resize operation will be performed concurrently with other operations, providing minimal blocking as we have locks equal to the number of CPUs times two.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This will allow for a cache with off heap to be started significantly faster and relieves some configuration options that were unneeded. Note that the map, just like a java.util.HashMap, will not decrease the number of "buckets" once it grows to a given size.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_iteration_changes"&gt;&lt;a class="anchor" href="#_iteration_changes" /&gt;Iteration changes&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;I mentioned that iteration was slower during startup of larger number of "buckets". This was due to it possibly having a large number of them, however it was also plauged by an ineffecient way of iterating over them. In addition to rewriting the resize operation, we have also optimized the memory layout so that "buckets" can be iterated sequentially which provides more mechanical sympathy.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_hash_changes"&gt;&lt;a class="anchor" href="#_hash_changes" /&gt;Hash changes&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This one is rather short and sweet, but the old hash algorithm we used would cause too many collisions for objects that had hash functions that returned values in a similar range, such as java.lang.Integer and java.util.String (with shared startubg characters).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Therefore it has been changed to provide a bit better spreading. This is part of ISPN 10.0.0.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_expiration_bugs"&gt;&lt;a class="anchor" href="#_expiration_bugs" /&gt;Expiration bugs&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Unfortunately off heap had a few issues with expiration. It didn’t support max idle and expiration metadata was not properly transferred to new nodes during state transfer.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In addition to max idle algorithm being rewritten, Off heap now properly supports max idle as of 10.1.4.Final and 11.0.0.Final.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Off heap metadata transferred to new nodes has been fixed in 10.1.8.Final and 11.0.0.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RBUgma6u_Uw" height="1" width="1" alt=""/&gt;</content><summary>The off heap implementation in Infinispan has become much more widely used since its introduction. There have been some issues and improvements identified to get this storage type more in line with its heap counterpart. For those of you that are unware the off-heap setting is actually only "off" the JVM heap and still resides in the native memory of the application. The best part of all the below ...</summary><dc:creator>William Burns</dc:creator><dc:date>2020-06-09T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/06/09/offheap-resize/</feedburner:origLink></entry><entry><title>AI vs COVID-19: How Java helps nurses and doctors in this fight</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fVyQ0_6qk58/" /><category term="business automation" scheme="searchisko:content:tags" /><category term="COVID-19" scheme="searchisko:content:tags" /><category term="devnation" scheme="searchisko:content:tags" /><category term="event-driven" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="healthcare" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="optaplanner" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="workforce planning" scheme="searchisko:content:tags" /><author><name>Geoffrey De Smet</name></author><id>searchisko:content:id:jbossorg_blog-ai_vs_covid_19_how_java_helps_nurses_and_doctors_in_this_fight</id><updated>2020-06-09T07:00:46Z</updated><published>2020-06-09T07:00:46Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn how OptaPlanner has helped keep medical staff and patients safer with advanced planning algorithms, from &lt;a target="_blank" rel="nofollow" href="&amp;#34;https://developers.redhat.com/blog/author/gdesmet@redhat.com/"&gt;Geoffrey De Smet&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/yanaga/"&gt;Edson Yanaga&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Assigning nurses and doctors to hospital shifts is far more challenging than it looks on the surface. Don’t give two shifts at the same time. Adhere to skill requirements. When going home, leave enough time for a full night’s sleep. Maximize approval of their day off requests. Make the schedule fair. With advanced planning algorithms, the best-kept secret in AI, you can solve this challenge easily in Java.&lt;/p&gt; &lt;p&gt;Advanced planning algorithms can do better than human planning, in far less time. OptaPlanner is used across the globe for such use cases. In this session, I’ll show you how. Then a pandemic hits—time for some business agility. Don’t put diabetic nurses in COVID wards. Avoid putting a non-COVID shift after a COVID shift. When enough nurses recover from the virus, distribute them such that each ward has an inoculated nurse at all times. Fortunately, we can add such constraints in OptaPlanner quickly.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/kmvLxaAhC9Y?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F09%2Fai-vs-covid-19-how-java-helps-nurses-and-doctors-in-this-fight%2F&amp;#38;linkname=AI%20vs%20COVID-19%3A%20How%20Java%20helps%20nurses%20and%20doctors%20in%20this%20fight" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F09%2Fai-vs-covid-19-how-java-helps-nurses-and-doctors-in-this-fight%2F&amp;#38;linkname=AI%20vs%20COVID-19%3A%20How%20Java%20helps%20nurses%20and%20doctors%20in%20this%20fight" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F09%2Fai-vs-covid-19-how-java-helps-nurses-and-doctors-in-this-fight%2F&amp;#38;linkname=AI%20vs%20COVID-19%3A%20How%20Java%20helps%20nurses%20and%20doctors%20in%20this%20fight" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F09%2Fai-vs-covid-19-how-java-helps-nurses-and-doctors-in-this-fight%2F&amp;#38;linkname=AI%20vs%20COVID-19%3A%20How%20Java%20helps%20nurses%20and%20doctors%20in%20this%20fight" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F09%2Fai-vs-covid-19-how-java-helps-nurses-and-doctors-in-this-fight%2F&amp;#38;linkname=AI%20vs%20COVID-19%3A%20How%20Java%20helps%20nurses%20and%20doctors%20in%20this%20fight" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F09%2Fai-vs-covid-19-how-java-helps-nurses-and-doctors-in-this-fight%2F&amp;#38;linkname=AI%20vs%20COVID-19%3A%20How%20Java%20helps%20nurses%20and%20doctors%20in%20this%20fight" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F09%2Fai-vs-covid-19-how-java-helps-nurses-and-doctors-in-this-fight%2F&amp;#38;linkname=AI%20vs%20COVID-19%3A%20How%20Java%20helps%20nurses%20and%20doctors%20in%20this%20fight" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F09%2Fai-vs-covid-19-how-java-helps-nurses-and-doctors-in-this-fight%2F&amp;#038;title=AI%20vs%20COVID-19%3A%20How%20Java%20helps%20nurses%20and%20doctors%20in%20this%20fight" data-a2a-url="https://developers.redhat.com/blog/2020/06/09/ai-vs-covid-19-how-java-helps-nurses-and-doctors-in-this-fight/" data-a2a-title="AI vs COVID-19: How Java helps nurses and doctors in this fight"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/09/ai-vs-covid-19-how-java-helps-nurses-and-doctors-in-this-fight/"&gt;AI vs COVID-19: How Java helps nurses and doctors in this fight&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fVyQ0_6qk58" height="1" width="1" alt=""/&gt;</content><summary>DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn how OptaPlanner has helped keep medical staff and patients safer with advanced planning algorithms, from Geoffrey De Smet and Edson Yanaga. Assigning nurses and doctors to hospital shifts is far...</summary><dc:creator>Geoffrey De Smet</dc:creator><dc:date>2020-06-09T07:00:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/09/ai-vs-covid-19-how-java-helps-nurses-and-doctors-in-this-fight/</feedburner:origLink></entry><entry><title>Infinispan Operator 1.1.2 is out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xUmcWIEEDZs/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="operator" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Vittorio Rigamonti</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_operator_1_1_2_is_out</id><updated>2020-06-09T09:22:47Z</updated><published>2020-06-08T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We’re pleased to announce &lt;a href="https://operatorhub.io/operator/infinispan"&gt;version 1.1.2 of the Infinispan Operator&lt;/a&gt; for Kubernetes and Red Hat OpenShift.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Release highlights:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Simplified configuration for external services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Improved readability of CR yaml output.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Now available from the &lt;a href="https://quay.io/repository/infinispan/operator?tag=latest&amp;amp;tab=tags"&gt;Operator image registry&lt;/a&gt; at quay.io.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Get full release information at &lt;a href="https://github.com/infinispan/infinispan-operator/milestone/10?closed=1"&gt;version 1.1.2&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Our community documentation has also been updated and improved! Be sure to check out the &lt;a href="https://infinispan.org/infinispan-operator/1.1.x/operator.html"&gt;Infinispan Operator v1.1.x Guide&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_update_channels_and_automatic_upgrades_on_openshift"&gt;&lt;a class="anchor" href="#_update_channels_and_automatic_upgrades_on_openshift" /&gt;Update Channels and Automatic Upgrades on OpenShift&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Starting with this release we are moving channels from a stable/preview structure to a micro-stream structure. This means you’ll get channels for each major.minor version of Infinispan.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For now version 1.1.x is available on the dev-preview channel but you should switch your Operator subscription to the 1.1.x channel before the next release to continue receiving updates.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you use the Automatic Approval upgrade policy on OpenShift, your cluster is now running Infinispan Operator version 1.1.2 with the Infinispan 10.1.7.Final server image.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_get_it_use_it_ask_us"&gt;&lt;a class="anchor" href="#_get_it_use_it_ask_us" /&gt;Get it, Use it, Ask us!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Try the &lt;a href="https://github.com/infinispan/infinispan-simple-tutorials/tree/operator-1.1.x/operator"&gt;simple tutorial for 1.1.x&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can &lt;a href="https://github.com/infinispan/infinispan-operator/issues"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/"&gt;chat with us&lt;/a&gt;, ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xUmcWIEEDZs" height="1" width="1" alt=""/&gt;</content><summary>We’re pleased to announce version 1.1.2 of the Infinispan Operator for Kubernetes and Red Hat OpenShift. Release highlights: Simplified configuration for external services. Improved readability of CR yaml output. Now available from the Operator image registry at quay.io. Get full release information at version 1.1.2. Our community documentation has also been updated and improved! Be sure to check ...</summary><dc:creator>Vittorio Rigamonti</dc:creator><dc:date>2020-06-08T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/06/08/infinispan-operator-1/</feedburner:origLink></entry><entry><title>Commit to excellence: Java in containers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/M005jSKTuqs/" /><category term="buildah" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="containers Java" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="java microservices" scheme="searchisko:content:tags" /><category term="Kubernetes java" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Universal Base Images (UBI)" scheme="searchisko:content:tags" /><category term="windows" scheme="searchisko:content:tags" /><author><name>Markus Eisele (@myfear)</name></author><id>searchisko:content:id:jbossorg_blog-commit_to_excellence_java_in_containers</id><updated>2020-06-08T07:00:57Z</updated><published>2020-06-08T07:00:57Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about using &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; with containers from &lt;a href="https://developers.redhat.com/blog/author/markus-eisele/"&gt;Markus Eisele&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/burrsutter/"&gt;Burr Sutter&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Java in 2019 was predicted to be business as usual by many. New Java releases came out as planned, AdoptOpenJDK became the main trustful source of binaries, and Oracle fought for the trademark again by preventing the use of &lt;code&gt;javax&lt;/code&gt; as a namespace.&lt;/p&gt; &lt;p&gt;Yes, everything looked like it would be a silent year for Java, but one thing seems obvious. Java&amp;#8217;s popularity is not gaining any more traction. New language features keep it up-to-date but people are getting more selective when it comes to implementation choices—especially in the age of &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt; and cloud infrastructure.&lt;/p&gt; &lt;p&gt;This talk walks you through the why and how of Java in containers. We will cover image size, and development and deployment processes.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/YdvR5KwWNu4?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F08%2Fcommit-to-excellence-java-in-containers%2F&amp;#38;linkname=Commit%20to%20excellence%3A%20Java%20in%20containers" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F08%2Fcommit-to-excellence-java-in-containers%2F&amp;#38;linkname=Commit%20to%20excellence%3A%20Java%20in%20containers" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F08%2Fcommit-to-excellence-java-in-containers%2F&amp;#38;linkname=Commit%20to%20excellence%3A%20Java%20in%20containers" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F08%2Fcommit-to-excellence-java-in-containers%2F&amp;#38;linkname=Commit%20to%20excellence%3A%20Java%20in%20containers" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F08%2Fcommit-to-excellence-java-in-containers%2F&amp;#38;linkname=Commit%20to%20excellence%3A%20Java%20in%20containers" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F08%2Fcommit-to-excellence-java-in-containers%2F&amp;#38;linkname=Commit%20to%20excellence%3A%20Java%20in%20containers" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F08%2Fcommit-to-excellence-java-in-containers%2F&amp;#38;linkname=Commit%20to%20excellence%3A%20Java%20in%20containers" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F08%2Fcommit-to-excellence-java-in-containers%2F&amp;#038;title=Commit%20to%20excellence%3A%20Java%20in%20containers" data-a2a-url="https://developers.redhat.com/blog/2020/06/08/commit-to-excellence-java-in-containers/" data-a2a-title="Commit to excellence: Java in containers"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/08/commit-to-excellence-java-in-containers/"&gt;Commit to excellence: Java in containers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/M005jSKTuqs" height="1" width="1" alt=""/&gt;</content><summary>DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about using Java with containers from Markus Eisele and Burr Sutter. Java in 2019 was predicted to be business as usual by many. New Java releases came out as planned, AdoptOpenJDK became the ma...</summary><dc:creator>Markus Eisele (@myfear)</dc:creator><dc:date>2020-06-08T07:00:57Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/08/commit-to-excellence-java-in-containers/</feedburner:origLink></entry><entry><title>Cloud-native development - On remote containers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/glDDmyJVziw/cloud-native-development-on-remote-containers.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-cloud_native_development_on_remote_containers</id><updated>2020-06-10T13:32:29Z</updated><published>2020-06-08T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s1600/cloud-native-development-ld.png" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s320/cloud-native-development-ld.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="font-size: 12.8px; text-align: center;"&gt;Part 4 - Development on remote containers&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The previous articles were introducing the foundations of a blueprint&amp;nbsp;for cloud-native development, exploring a logical diagram, and diving into the first use case with &lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-local-containers.html" target="_blank"&gt;cloud-native development on local containers&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In this article we're continuing on to example use cases within the architectural blueprint. Descriptions are provided to guide you with aligning the landscape your organization works with every day.&lt;br /&gt;&lt;br /&gt;These details should help you understand both what the elements contain and how they might align and how their functionalities are grouped. Let's look at the use case where developers are leveraging a remote container platform for their cloud-native development environments and see how that's mapping to a productive working architecture for deploying their solutions.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;We'll be exploring the use case for developer environments that are using a remote container platform for their development environments. The integration of the developer tooling with a proper workflow for pushing their solutions to a remote development environment is crucial and is presented here from developer, to remote development environment, and finally to the test infrastructure.&lt;br /&gt;&lt;br /&gt;Any environments beyond this example, such as acceptance or production environments, would be achieved by applying the same blueprint shown in this example as the testing environment. Keep this in mind when exploring your cloud-native development on remote containers solutions.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Developer on remote containers (runtimes and integration)&lt;/h3&gt;&lt;div&gt;This example starts with a cloud-native developer working on their local machines, using some form of integrated development environment (IDE) together with a roughly outlined here set of tooling. We realize that many different tool sets can be found in development teams, but for simplicity we collected the following major elements as the developer stack in the figure shown here.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-iinOxWPJ2ME/Xs5tfUy_bQI/AAAAAAAAxMU/E8Yr6L2wuXI75byLtEZeipfVoIHmDrSPACK4BGAsYHg/cloud-native-development-remote-containers-runtimes-sd.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="0" data-original-height="3042" data-original-width="5409" height="180" src="https://1.bp.blogspot.com/-iinOxWPJ2ME/Xs5tfUy_bQI/AAAAAAAAxMU/E8Yr6L2wuXI75byLtEZeipfVoIHmDrSPACK4BGAsYHg/w320-h180/cloud-native-development-remote-containers-runtimes-sd.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Every development team&amp;nbsp; uses some form of source code management systems (SCM), which these days is more likely than not some form of a Git-based repository. Along with this is a dependency management tool such as the Apache Maven repository shown here. In our example we've chosen to feature Java runtimes with frameworks like Spring Boot and Camel integration. This would be the development stack used to create both applications, front-ends, and microservices.&lt;br /&gt;&lt;br /&gt;The last piece of the developer tooling is the container tooling used by the developer to push their code solutions to their remote developer container platform for building. In this remote container example, the tooling is focused on working with the OpenShift Container Platform so you see an&amp;nbsp;&lt;i&gt;OpenShift client&lt;/i&gt;&amp;nbsp;and other variations of this client tooling.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Once the developer is satisfied with their code and dependencies they have some options for setting up the push of their work to the centralized development team infrastructure. They can setup one of the following options to generate or trigger the push to the continuous integration and continuous development (CI / CD)&amp;nbsp;platform shown here as being hosted on an OpenShift Container Platform cluster:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;using git hooks, triggering a code push when it's committed to the local code repository&lt;/li&gt;&lt;li&gt;using Maven plugins, triggering a push to the development infrastructure when activated&lt;/li&gt;&lt;li&gt;using &lt;i&gt;oc client&lt;/i&gt; container tooling&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Development teams are free to use the method that best suits their own needs when pushing their code to&amp;nbsp; their CI/CD platform.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;CI/CD infrastructure&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;The pushed code from the developers local working environment is picked up by the CI/CD platform, in this case most often was a Jenkins-based platform. Here we see the CI/CD platform uses a source-to-image workflow to build the container image, test the image, and place it in the development infrastructure image registry. At this point it has been tagged as&amp;nbsp;&lt;i&gt;devImage&lt;/i&gt;.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Development infrastructure&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The task for the development infrastructure is to test this&amp;nbsp;&lt;i&gt;devImage&lt;/i&gt;, where we see the a&lt;i&gt;pplication&lt;/i&gt;&amp;nbsp;and m&lt;i&gt;icroservices&lt;/i&gt;&amp;nbsp;are deployed from the image registry. Note that we've chosen for simplicity in this diagram for the image registry, shown as a centralized registry and omitting the image registries found in each OpenShift Container Platform cluster.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Once the development testing has been satisfied, the &lt;i&gt;devImage&lt;/i&gt;&amp;nbsp;is tagged in the CI/CD platform as a &lt;i&gt;testImage&lt;/i&gt;&amp;nbsp;and deployed to the test infrastructure.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Test infrastructure&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The test infrastructure shows more details before this use case is completed, by taking the&amp;nbsp;&lt;i&gt;testImage&lt;/i&gt;&amp;nbsp;from the image registry and deploying the containers with the&amp;nbsp;&lt;i&gt;application&lt;/i&gt;&amp;nbsp;and&amp;nbsp;&lt;i&gt;microservices&lt;/i&gt;&amp;nbsp;as needed. At this point the testing cycle starts again with new test infrastructure data and requirements on the road to a production deployment.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This use case example features runtime and integration frameworks for creating applications and microservices using remote containers by developers in your organization. It's featuring a blueprint for mapping your cloud-native development process for deploying the developer solution through to your test infrastructure. This should be enough to help you in setting up a cloud-native development and deployment environment on towards your desired production environment.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-_AzpOUZ-Kk0/Xs5tr54No5I/AAAAAAAAxMk/5aMBFK7sgOQ0T8TiHrjMZS7ThnnuucB0QCK4BGAsYHg/cloud-native-development-remote-containers-process-sd.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="0" data-original-height="3042" data-original-width="5409" height="180" src="https://1.bp.blogspot.com/-_AzpOUZ-Kk0/Xs5tr54No5I/AAAAAAAAxMk/5aMBFK7sgOQ0T8TiHrjMZS7ThnnuucB0QCK4BGAsYHg/w320-h180/cloud-native-development-remote-containers-process-sd.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Developer on remote containers (process automation)&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Another example is provided in the figure shown here, this is the same development setup and deployment across developer machines, remote development infrastructure, and testing infrastructure. The featured development focus is now for process automation projects that deploy eventual process microservices with eventual microservices that they might need.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;h3&gt;Exploring the diagrams&lt;/h3&gt;&lt;div&gt;As mentioned in the introduction to this series, we've pulled together an&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;examples repository&lt;/a&gt;&amp;nbsp;for all our architecture blueprint diagrams. The&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;Portfolio Architecture Examples&lt;/a&gt;&amp;nbsp;repository makes it possible to collect and share individual images from each diagram element as well as the entire project as a whole.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-dRBXuaZt5t0/XsuO-04T-9I/AAAAAAAAxK4/lXES7oKvrwEJjgtKcvJyJqwK3v0Ey65lgCNcBGAsYHQ/s1600/Screenshot%2B2020-05-25%2Bat%2B11.24.53.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="303" data-original-width="1219" height="98" src="https://1.bp.blogspot.com/-dRBXuaZt5t0/XsuO-04T-9I/AAAAAAAAxK4/lXES7oKvrwEJjgtKcvJyJqwK3v0Ey65lgCNcBGAsYHQ/s400/Screenshot%2B2020-05-25%2Bat%2B11.24.53.png" title="" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;To access the diagram covered in this article, you scroll down to the file listings on the main page, you can locate a schematic diagram as shown in the figure here.&lt;br /&gt;&lt;br /&gt;This is the collection for the schematic diagrams associated with cloud-native development:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in this case it's a single image you can click to view&lt;/li&gt;&lt;li&gt;a project file you can download to your local machine using the&amp;nbsp;&lt;i&gt;Download Diagram&lt;/i&gt;&amp;nbsp;link&lt;/li&gt;&lt;li&gt;a&amp;nbsp;&lt;i&gt;Load Diagram&lt;/i&gt;&amp;nbsp;link that you can click to automatically open the project diagrams in the diagram tooling used in this blueprint&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Give it a try and feel free to explore the collection of logical, schematic, detailed, solution, and community diagrams. This should allow you to get started much quicker than from scratch if you can kick-start a project with existing diagrams.&lt;br /&gt;&lt;br /&gt;Should you design your own diagrams, please contribute the project file (ending in .drawio) by raising an issue with the file attached. We'd love to continue collecting these projects for others to use.&lt;br /&gt;&lt;br /&gt;Finally, there is a free online&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-workshops" target="_blank"&gt;beginners guide workshop&lt;/a&gt;&amp;nbsp;available focused on using the diagram tooling, please explore to learn tips and tricks from the experts.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on the cloud-native development portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;A blueprint&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-common-architectural-elements.html" target="_blank"&gt;Common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-local-containers.html" target="_blank"&gt;Cloud-native development on local containers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-remote-containers.html" target="_blank"&gt;Cloud-native development on remote containers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Cloud-native deployments&lt;/li&gt;&lt;li&gt;Cloud-native advanced deployments&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above. Next in this series, taking a look at cloud-native deployments.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=GAZbU-DkgNo:yH7S7IVlXr4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=GAZbU-DkgNo:yH7S7IVlXr4:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=GAZbU-DkgNo:yH7S7IVlXr4:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=GAZbU-DkgNo:yH7S7IVlXr4:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=GAZbU-DkgNo:yH7S7IVlXr4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=GAZbU-DkgNo:yH7S7IVlXr4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=GAZbU-DkgNo:yH7S7IVlXr4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=GAZbU-DkgNo:yH7S7IVlXr4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=GAZbU-DkgNo:yH7S7IVlXr4:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=GAZbU-DkgNo:yH7S7IVlXr4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=GAZbU-DkgNo:yH7S7IVlXr4:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/GAZbU-DkgNo" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/glDDmyJVziw" height="1" width="1" alt=""/&gt;</content><summary>Part 4 - Development on remote containersThe previous articles were introducing the foundations of a blueprint for cloud-native development, exploring a logical diagram, and diving into the first use case with cloud-native development on local containers. In this article we're continuing on to example use cases within the architectural blueprint. Descriptions are provided to guide you with alignin...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-06-08T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/GAZbU-DkgNo/cloud-native-development-on-remote-containers.html</feedburner:origLink></entry><entry><title>Cross Site Replication improvements</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/AdpFF2ciMlY/" /><category term="cross site replication" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="xsite" scheme="searchisko:content:tags" /><author><name>Pedro Ruivo</name></author><id>searchisko:content:id:jbossorg_blog-cross_site_replication_improvements</id><updated>2020-06-09T09:22:47Z</updated><published>2020-06-05T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan introduced Cross Site Replication functionality in version 5.2 and Infinispan 7 extended it to support state transfer. With an increase of popularity, Infinispan 11 brings two major improvements to Cross Site Replication. Let’s take a look at them.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_support_for_multiple_site_masters"&gt;&lt;a class="anchor" href="#_support_for_multiple_site_masters" /&gt;Support for multiple site masters&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan uses JGroups' &lt;a href="http://www.jgroups.org/manual4/index.html#Relay2Advanced"&gt;RELAY2&lt;/a&gt; protocol to enable inter-site communication. Each site has Site Masters: these are nodes with special roles, and are responsible for the communication between sites.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;RELAY2 can use more than one Site Master per site allowing load balancing of the inter-site requests. The new algorithm is now able to take advantage of multiple Site Masters.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The attribute &lt;code&gt;max_site_masters&lt;/code&gt; configures the number of Site Masters, and it defaults to 1. To take advantage of the new algorithm, increase the number of Site Masters in RELAY2 configuration by changing &lt;code&gt;max_site_masters&lt;/code&gt; to a value higher than 1. A number greater than the number of nodes can be used, and it enables the Site Master role in all nodes.&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;relay.RELAY2&lt;/span&gt; &lt;span class="attribute-name"&gt;site&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;&amp;lt;LOCAL_SITE_NAME&lt;/span&gt;&lt;/span&gt;&lt;span class="error"&gt;&amp;gt;&lt;/span&gt;" max_site_masters="&lt;span class="tag"&gt;&amp;lt;PUT_VALUE_HERE&amp;gt;&lt;/span&gt;"/&lt;span class="error"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;More information about RELAY2 is available in &lt;a href="http://www.jgroups.org/manual4/index.html#RELAY2"&gt;JGroups' Manual&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_conflict_detection_and_resolution_for_asynchronous_cross_site_replication"&gt;&lt;a class="anchor" href="#_conflict_detection_and_resolution_for_asynchronous_cross_site_replication" /&gt;Conflict detection and resolution for Asynchronous Cross-Site Replication&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan is able to detect conflicts in asynchronous mode by taking advantage of vector clocks. A conflict happens when 2 or more sites update the same key at the same time. Let’s look at an example between 2 sites (&lt;em&gt;LON&lt;/em&gt; and &lt;em&gt;NYC&lt;/em&gt;):&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight nowrap"&gt;&lt;code&gt; LON NYC k1=(n/a) 0,0 0,0 k1=2 1,0 --&amp;gt; 1,0 k1=2 k1=3 1,1 &amp;lt;-- 1,1 k1=3 k1=5 2,1 1,2 k1=8 --&amp;gt; 2,1 (conflict) (conflict) 1,2 &amp;lt;-- k1=5 2,1 &amp;lt;-&amp;gt; 2,1 k1=5&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;LON&lt;/em&gt; puts &lt;code&gt;k1=2&lt;/code&gt;, with vector clock &lt;code&gt;1,0&lt;/code&gt;, and replicates it to &lt;em&gt;NYC&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;NYC&lt;/em&gt; puts &lt;code&gt;k1=3&lt;/code&gt;, with vector clock &lt;code&gt;1,1&lt;/code&gt;, and replicates it to &lt;em&gt;LON&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;However if &lt;em&gt;LON&lt;/em&gt; puts &lt;code&gt;k1=5&lt;/code&gt; (with vector &lt;code&gt;2,1&lt;/code&gt;), and &lt;em&gt;NYC&lt;/em&gt; puts &lt;code&gt;k1=8&lt;/code&gt; in &lt;em&gt;NYC&lt;/em&gt; (with vector clock &lt;code&gt;1,2&lt;/code&gt;) at the same time, Infinispan detects the conflict since none of the vector clocks are greater than the other.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan resolves the conflicts by comparing using the site names in lexicographical order. The site’s name lower in lexicographical order takes priority. In the example above, both &lt;em&gt;LON&lt;/em&gt; and &lt;em&gt;NYC&lt;/em&gt; end up with &lt;code&gt;k1=5&lt;/code&gt; since &lt;em&gt;LON&lt;/em&gt; &amp;lt; &lt;em&gt;NYC&lt;/em&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can choose the priority by prepending a number to the site name. For example, if you want updates from &lt;em&gt;NYC&lt;/em&gt; to take priority over &lt;em&gt;LON&lt;/em&gt; updates, you can prepend a number to the site name, example: &lt;em&gt;1NYC&lt;/em&gt;, &lt;em&gt;2LON&lt;/em&gt; and so on.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For more information check the &lt;a href="https://infinispan.org/docs/dev/titles/xsite/xsite.html#conflicting_entries-xsite"&gt;Infinispan Documentation&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_get_it_use_it_ask_us"&gt;&lt;a class="anchor" href="#_get_it_use_it_ask_us" /&gt;Get it, Use it, Ask us!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please &lt;a href="https://infinispan.org/download/"&gt;download&lt;/a&gt;, &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/"&gt;chat with us&lt;/a&gt;, ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/AdpFF2ciMlY" height="1" width="1" alt=""/&gt;</content><summary>Infinispan introduced Cross Site Replication functionality in version 5.2 and Infinispan 7 extended it to support state transfer. With an increase of popularity, Infinispan 11 brings two major improvements to Cross Site Replication. Let’s take a look at them. Support for multiple site masters Infinispan uses JGroups' RELAY2 protocol to enable inter-site communication. Each site has Site Masters: t...</summary><dc:creator>Pedro Ruivo</dc:creator><dc:date>2020-06-05T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/06/05/xsite-improvements/</feedburner:origLink></entry><entry><title>Adding keystores and truststores to microservices in Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0A1a5MiDoEo/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="keystore" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Red Hat Fuse" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="Spring Boot" scheme="searchisko:content:tags" /><category term="truststore" scheme="searchisko:content:tags" /><author><name>Chandra Shekhar Pandey</name></author><id>searchisko:content:id:jbossorg_blog-adding_keystores_and_truststores_to_microservices_in_red_hat_openshift</id><updated>2020-06-05T07:00:50Z</updated><published>2020-06-05T07:00:50Z</published><content type="html">&lt;p&gt;You might not need Secure Socket Layer (SSL)-based communication between microservices in the same cluster, but it&amp;#8217;s often a requirement if you want to connect to a remote web service or message broker. In cases where you will expose a web service or other endpoints, you might also have to use a custom keystore in a microservice deployed on &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;, so that external clients only connect with a specific truststore.&lt;/p&gt; &lt;p&gt;In this article, I show you how to configure a keystore and a truststore for a &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt;-based microservice built with &lt;a href="https://developers.redhat.com/topics/spring-boot/"&gt;Spring Boot&lt;/a&gt;. I used the Apache Camel and CXF libraries from &lt;a href="https://developers.redhat.com/products/fuse/overview"&gt;Red Hat Fuse&lt;/a&gt; to develop the microservice. I used a source-to-image (S2I) deployment and tested the examples in Red Hat OpenShift 4.3.&lt;/p&gt; &lt;p&gt;&lt;span id="more-717767"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;About the example applications&lt;/h2&gt; &lt;p&gt;The first example application is a &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift"&gt;REST-based web service&lt;/a&gt; deployed in OpenShift 4.3 and communicating via SSL. The second example application is a &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl"&gt;client that connects with the remote secure web service&lt;/a&gt;. I&amp;#8217;ve hosted both applications and all of the example files for this article on GitHub.&lt;/p&gt; &lt;p&gt;Our task is to modify the microservice&amp;#8217;s &lt;code&gt;deployment-config&lt;/code&gt; so that we can mount the volume using a keystore or truststore. The keystore is for back-end services, and the truststore is for clients. For two-way SSL communication, we might want to use both mechanisms. Figure 1 shows the client application configured with a truststore.&lt;/p&gt; &lt;div id="attachment_718987" style="width: 428px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-23-05-30.png"&gt;&lt;img aria-describedby="caption-attachment-718987" class="wp-image-718987 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-23-05-30.png" alt="A screenshot with the volume mount and volume configurations highlighted." width="418" height="478" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-23-05-30.png 418w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-23-05-30-262x300.png 262w" sizes="(max-width: 418px) 100vw, 418px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-718987" class="wp-caption-text"&gt;Figure 1. The client configured with a truststore.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We&amp;#8217;ll go through the process to secure and deploy a REST-based web service in OpenShift 4.3. Note that these instructions work for either a new OpenShift project or an existing one. I will use the example applications that I&amp;#8217;ve just introduced.&lt;/p&gt; &lt;h2&gt;Secure and deploy a REST-based web service&lt;/h2&gt; &lt;p&gt;To secure and deploy a REST-based web service to OpenShift 4.3, start by creating the keystore and truststore. Then add them to your project&amp;#8217;s secret (&lt;code&gt;rest-keystore&lt;/code&gt;), as shown:&lt;/p&gt; &lt;pre&gt;$ keytool -genkey -alias mydomain -keyalg RSA -keystore keystore.jks -keysize 2048 $ keytool -export -alias mydomain -file mydomain.crt -keystore keystore.jks $ keytool -import -trustcacerts -alias mydomain -file mydomain.crt -keystore clientkeystore.jks $ oc create secret generic rest-keystore --from-file=keystore.jks &lt;/pre&gt; &lt;p&gt;Next, add the &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/src/main/resources/application.properties#L2-L6"&gt;SSL configuration&lt;/a&gt; to your &lt;code&gt;src/main/resources/application.properties&lt;/code&gt; file (follow the config link for more details):&lt;/p&gt; &lt;pre&gt;server.port=8080 server.ssl.key-password=password server.ssl.key-store=/mnt/secrets/keystore.jks server.ssl.key-store-provider=SUN server.ssl.key-store-type=JKS &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The keystore&amp;#8217;s path is &lt;code&gt;server.ssl.key-store&lt;/code&gt;. Later, we will modify the Spring Boot microservice&amp;#8217;s &lt;code&gt;deployment-config&lt;/code&gt; to mount a volume with this keystore.&lt;/p&gt; &lt;h3&gt;Define the web service&lt;/h3&gt; &lt;p&gt;Next, in &lt;code&gt;src/main/resources/endpoint.xml&lt;/code&gt;, you will &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/src/main/resources/endpoint.xml#L38"&gt;define the CXF-based JAX-RS web service&lt;/a&gt;. Note the inbound and outbound interceptors that are configured to log requests and responses.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The operation described in &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/src/main/java/io/fabric8/quickstarts/cxf/jaxrs/HelloServiceImpl.java#L21"&gt;HelloServiceImpl.java&lt;/a&gt;&lt;/code&gt; is invoked externally from clients.&lt;/p&gt; &lt;p&gt;This example microservice is initiated from &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/src/main/java/io/fabric8/quickstarts/cxf/jaxrs/SampleRestApplication.java#L24-L25"&gt;SampleRestApplication&lt;/a&gt;. Note the annotations &lt;code&gt;SpringBootApplication&lt;/code&gt; and &lt;code&gt;ImportResource&lt;/code&gt;. The &lt;code&gt;SpringBootApplication&lt;/code&gt; annotation is the same as declaring a class together with &lt;code&gt;@Configuration&lt;/code&gt;, &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;, and &lt;code&gt;@ComponentScan&lt;/code&gt; annotations. The &lt;code&gt;ImportResource&lt;/code&gt; annotation imports the bean definition from the resource&amp;#8217;s &lt;code&gt;endpoint.xml&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Deploy the web service&lt;/h3&gt; &lt;p&gt;Do the following in your OpenShift 4.3 GUI:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Select the &lt;strong&gt;Developer&lt;/strong&gt; perspective.&lt;/li&gt; &lt;li&gt;Select &lt;strong&gt;Add&lt;/strong&gt; &lt;strong&gt;-&amp;#62;&lt;/strong&gt; &lt;strong&gt;From Catalog&lt;/strong&gt; &lt;strong&gt;-&amp;#62;&lt;/strong&gt; &lt;strong&gt;Search&lt;/strong&gt; and look for &lt;strong&gt;CXF JAX-RS with Spring&lt;/strong&gt;, shown in Figure 2. In this case, we&amp;#8217;re using S2I to deploy both the web service and client applications in OpenShift. &lt;p&gt;&lt;div id="attachment_717827" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49.png"&gt;&lt;img aria-describedby="caption-attachment-717827" class="wp-image-717827 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49-1024x463.png" alt="A screenshot showing the Developer perspective -&amp;#62; Add -&amp;#62; From Catalog -&amp;#62; Search -&amp;#62; CXF JAX-RS with Spring." width="640" height="289" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49-1024x463.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49-300x136.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49-768x347.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49.png 1266w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-717827" class="wp-caption-text"&gt;Figure 2. Search the developer catalog for shared apps, services, and S2I image builders.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Next, do the following:&lt;/p&gt; &lt;ol start="3"&gt; &lt;li&gt;Select the &lt;strong&gt;CXF JAX-RS with Spring&lt;/strong&gt; template and click &lt;strong&gt;Instantiate Template&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Set the &lt;strong&gt;Git Repository URL&lt;/strong&gt; and branch it.&lt;/li&gt; &lt;li&gt;Take note of the version and &lt;strong&gt;Service Name&lt;/strong&gt;. The other entries will remain the same.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Create&lt;/strong&gt; at the bottom of the page, as shown in Figure 3.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_717837" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55.png"&gt;&lt;img aria-describedby="caption-attachment-717837" class="wp-image-717837" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55-1024x517.png" alt="A screenshot showing the template instantiation window." width="639" height="323" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55-1024x517.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55-300x152.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55-768x388.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55.png 1045w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-717837" class="wp-caption-text"&gt;Figure 3. Instantiate your template.&lt;/p&gt;&lt;/div&gt; &lt;ol start="7"&gt; &lt;li&gt;Wait a few minutes for OpenShift to create the &lt;code&gt;build-config&lt;/code&gt;, &lt;code&gt;deployment-config&lt;/code&gt;, and (finally) the pods.&lt;/li&gt; &lt;/ol&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: In some cases, OpenShift might not have the templates that you need. See the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.5/html-single/fuse_on_openshift_guide/index"&gt;Red Hat Fuse documentation&lt;/a&gt; to add or update a template to the latest version.&lt;/p&gt; &lt;h3&gt;Mount a volume with the keystore&lt;/h3&gt; &lt;p&gt;Now you will mount a volume with the keystore. To do this, add two entries to your &lt;code&gt;deployment-config&lt;/code&gt;: &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L114-L117"&gt;volumeMounts&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L66-L71"&gt;keystore.jks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Adding &lt;code&gt;volumeMounts&lt;/code&gt; to &lt;code&gt;deployment-config&lt;/code&gt; creates the mount path. Once that&amp;#8217;s done, you can use your &lt;code&gt;rest-keystore&lt;/code&gt; secret to add the &lt;code&gt;keystore.jks&lt;/code&gt; entry to the mount path.&lt;/p&gt; &lt;h4&gt;Two ways to add a keystore&lt;/h4&gt; &lt;p&gt;There are two ways to add these entries to your &lt;code&gt;deployment-config&lt;/code&gt;. Your first option is to edit the &lt;code&gt;deployment-config&lt;/code&gt; file and add the entries manually, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_718947" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04.png"&gt;&lt;img aria-describedby="caption-attachment-718947" class="wp-image-718947 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04-1024x576.png" alt="A screenshot showing the project's deployment-config in OpenShift." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04.png 1280w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-718947" class="wp-caption-text"&gt;Figure 4. Edit the deployment-config file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Your second option is to add the &lt;code&gt;rest-keystore&lt;/code&gt; secret to your project workload, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_718957" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19.png"&gt;&lt;img aria-describedby="caption-attachment-718957" class="wp-image-718957 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19-1024x576.png" alt="A screenshot of the 'Add Secret to Workload' dialog box." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19.png 1280w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-718957" class="wp-caption-text"&gt;Figure 5. Add the rest-keystore secret to the project workload.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you choose the second option, check the &lt;code&gt;deployment-config&lt;/code&gt; after saving your work. You will find entries showing that the keystore is volume-mounted from the &lt;code&gt;rest-keystore&lt;/code&gt; secret. You will still have to edit the configuration so that it exactly matches &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L114-L117"&gt;volumeMounts&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L66-L71"&gt;keystore.jks&lt;/a&gt;. Nonetheless, I prefer using the secret because it leads to fewer typos and YAML formatting issues.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: I had to set the &lt;code&gt;scheme&lt;/code&gt; as HTTPS for the &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L81-L85"&gt;readiness&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L93-L97"&gt;liveliness&lt;/a&gt; probes.&lt;/p&gt; &lt;h3&gt;Accessing the microservice&lt;/h3&gt; &lt;p&gt;After you&amp;#8217;ve completed these configurations, you should find you have a running and healthy pod:&lt;/p&gt; &lt;pre&gt;$ oc get pods s2i-fuse74-spring-boot-cxf-jaxrs-8-dq4zd 1/1 Running 0 3d7h &lt;/pre&gt; &lt;p&gt;To access this microservice from an external client, you will need to create an OpenShift route with &lt;code&gt;passthrough&lt;/code&gt; termination:&lt;/p&gt; &lt;pre&gt;$ oc get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE ssl-cxf-jaxrs ClusterIP None 9413/TCP 4d6h $ oc create route passthrough --service ssl-cxf-jaxrs $ oc get route NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD ssl-cxf-jaxrs ssl-cxf-jaxrs-restproject.apps.openshift4b.lab.upshift.rdu2.redhat.com ssl-cxf-jaxrs passthrough None ssl-cxf-jaxrs-route ssl-cxf-jaxrs-route-restproject.apps.openshift4b.lab.upshift.rdu2.redhat.com ssl-cxf-jaxrs None &lt;/pre&gt; &lt;p&gt;Finally, access the route &lt;code&gt;ssl-cxf-jaxrs&lt;/code&gt;, which is a &lt;code&gt;passthrough&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;With that, you have configured SSL for the web service, as this output shows:&lt;/p&gt; &lt;pre&gt;$ curl -k https://ssl-cxf-jaxrs-restproject.apps.openshift4b.lab.upshift.rdu2.redhat.com/services/helloservice/sayHello/FIS Hello FIS, Welcome to CXF RS Spring Boot World!!! &lt;/pre&gt; &lt;p&gt;Next, I&amp;#8217;ll quickly introduce the client application, which you can set up to connect to your one-way SSL web service application.&lt;/p&gt; &lt;h2&gt;A client for the secure REST-based web service&lt;/h2&gt; &lt;p&gt;My example for the client application is an &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl"&gt;Apache Camel SSL-based microservice&lt;/a&gt; (&lt;code&gt;camel-client-ssl&lt;/code&gt;). I deployed the microservice in OpenShift using the same S2I approach I just demonstrated for the web service.&lt;/p&gt; &lt;p&gt;For this example, I&amp;#8217;ve also written a &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/Fuse7_examples/blob/master/jaxrs-ssl-example-springboot-openshift/spring-boot-cxf-jaxrs-xml-tls"&gt;special version of the web service&lt;/a&gt; that you can run standalone in your local laptop or a virtual machine (VM). To run the example, you just need to ensure that your OpenShift cluster is reachable from your VM or notebook. The first time you run the application, use &lt;code&gt;mvn spring-boot:run&lt;/code&gt; from the &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Example setup&lt;/h3&gt; &lt;p&gt;I won&amp;#8217;t go through the entire process of configuring the client to interact with your web service. I&amp;#8217;ll just point out a few essential details.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;First, notice the &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/src/main/resources/application.properties#L11-L15"&gt;application.properties&lt;/a&gt;&lt;/code&gt; for the Spring Boot-based microservice. You will use this file to define the IP and port of the service you want to connect to, and the details of the truststore.&lt;/li&gt; &lt;li&gt;Use the &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/src/main/resources/spring/camel-context.xml#L9-L11"&gt;camel-http4&lt;/a&gt;&lt;/code&gt; component with your truststore configuration and &lt;code&gt;NoopHostnameVerifier&lt;/code&gt;, so that &lt;code&gt;hostname&lt;/code&gt; isn&amp;#8217;t validated. (I used a self-signed keystore and truststore.)&lt;/li&gt; &lt;li&gt;The client is a Camel route with an &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/src/main/resources/spring/camel-context.xml#L16"&gt;camel-http&lt;/a&gt;&lt;/code&gt; endpoint used for the &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/src/main/resources/spring/camel-context.xml#L23"&gt;producer or HTTP client&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;For the example to work, you must deploy the client microservice using S2I. Search for &lt;strong&gt;Camel XML DSL with Spring Boot&lt;/strong&gt; in your OpenShift developer catalog. Instantiate the template with the Git URL pointing to the &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/src/main/resources/spring/camel-context.xml#L16"&gt;camel-http&lt;/a&gt;&lt;/code&gt; endpoint.&lt;/li&gt; &lt;li&gt;Once you&amp;#8217;ve deployed the client microservice, modify the &lt;code&gt;deployment-config&lt;/code&gt; as described in the previous section: &lt;ul&gt; &lt;li&gt;Add a &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/deploymentconfig.yaml#L115-L118"&gt;&lt;code&gt;volumeMounts&lt;/code&gt;&lt;/a&gt; entry to your &lt;code&gt;deployment-config&lt;/code&gt; to create the volume mount path.&lt;/li&gt; &lt;li&gt;Add a &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/deploymentconfig.yaml#L66-L72"&gt;&lt;code&gt;keystore.jks&lt;/code&gt;&lt;/a&gt; entry to the volume-mount path. I recommend using the  &lt;code&gt;rest-keystore&lt;/code&gt; secret rather than directly modifying the &lt;code&gt;deployment-config&lt;/code&gt; file.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;That&amp;#8217;s it! With these steps, you should be able to use a truststore to connect to an external SSL web service or HTTPS endpoint from your client application.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;I have described the steps to configure a keystore for a remote web service or HTTP endpoint, and how to configure a truststore for a web service client, HTTP client, or messaging client. I hope that you will find the instructions helpful for creating microservices using certificates, or for creating an HTTP or messaging client to connect to an external HTTPS REST endpoint or message broker. I&amp;#8217;ve also provided instructions for migrating and deploying an existing application to OpenShift 4.3.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#038;title=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/06/05/adding-keystores-and-truststores-to-microservices-in-red-hat-openshift/" data-a2a-title="Adding keystores and truststores to microservices in Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/05/adding-keystores-and-truststores-to-microservices-in-red-hat-openshift/"&gt;Adding keystores and truststores to microservices in Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0A1a5MiDoEo" height="1" width="1" alt=""/&gt;</content><summary>You might not need Secure Socket Layer (SSL)-based communication between microservices in the same cluster, but it’s often a requirement if you want to connect to a remote web service or message broker. In cases where you will expose a web service or other endpoints, you might also have to use a custom keystore in a microservice deployed on Red Hat OpenShift, so that external clients only connect ...</summary><dc:creator>Chandra Shekhar Pandey</dc:creator><dc:date>2020-06-05T07:00:50Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/05/adding-keystores-and-truststores-to-microservices-in-red-hat-openshift/</feedburner:origLink></entry><entry><title>Mandrel: A community distribution of GraalVM for the Red Hat build of Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/zEPWxE__E8o/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="GraalVM" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="OpenJDK 11" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><author><name>Mark Little</name></author><id>searchisko:content:id:jbossorg_blog-mandrel_a_community_distribution_of_graalvm_for_the_red_hat_build_of_quarkus</id><updated>2020-06-05T07:00:16Z</updated><published>2020-06-05T07:00:16Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;The Java community has demonstrated time and time again its ability to evolve, improve, and adapt to meet the needs of its developers and users. Even after 25 years of language and framework choices, &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; has consistently ranked in the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.tiobe.com/tiobe-index//"&gt;&lt;span style="font-weight: 400;"&gt;top&lt;/span&gt;&lt;/a&gt; &lt;a target="_blank" rel="nofollow" href="https://spectrum.ieee.org/computing/software/the-top-programming-languages-2019"&gt;&lt;span style="font-weight: 400;"&gt;languages&lt;/span&gt;&lt;/a&gt; &lt;a target="_blank" rel="nofollow" href="https://redmonk.com/sogrady/2020/02/28/language-rankings-1-20/"&gt;&lt;span style="font-weight: 400;"&gt;in use&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; today due to its strong track record and capabilities in enterprise use cases. Red Hat has long been a strong leader in Java and open source software development and remains committed to being at the forefront of Java as it continues to evolve.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Today, Red Hat and the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.graalvm.org/community/"&gt;&lt;span style="font-weight: 400;"&gt;GraalVM community&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; jointly established a new downstream distribution of GraalVM, called &lt;/span&gt;&lt;a href="https://github.com/graalvm/mandrel"&gt;Mandrel&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;This distribution will power the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/quarkus"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat build of Quarkus&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, a recently &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;announced&lt;/span&gt; &lt;a href="https://developers.redhat.com/blog/2020/05/28/quarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat/"&gt;&lt;span style="font-weight: 400;"&gt;addition to &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Runtimes&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. This article explains what Mandrel is and why it is necessary.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span id="more-727707"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Java going forward&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;For some time now, Red Hat has been looking at the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/looking-next-20-years-enterprise-java"&gt;&lt;span style="font-weight: 400;"&gt;future of Java&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; and how its customers and their developers could continue to use their years of Java experience in this new world of &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;. That Java experience applies to more than the language—it also includes many libraries and frameworks that have become ingrained in the muscle memory of developers, for example: Hibernate, CDI, RESTEasy, MicroProfile, or reactive frameworks such as Eclipse Vert.x and many others.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt;&lt;span style="font-weight: 400;"&gt;Quarkus project&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; was launched in 2019 and provided that evolutionary step needed for Java developers in this new world of Kubernetes and &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;serverless&lt;/a&gt;. In essence, Quarkus &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://siliconangle.com/2020/04/29/quarkus-makes-java-compatible-with-new-cloud-native-app-development-rhsummit-rhsummit/"&gt;&lt;span style="font-weight: 400;"&gt;changes the rules of the Java game&lt;/span&gt;&lt;/a&gt;. I&lt;span style="font-weight: 400;"&gt;t optimizes both Java applications and the frameworks that underpin them to better match the constrained environments in which they are deployed and reverses the architectural and design choices made in Java’s early days. Quarkus brings a much smaller memory footprint at the expense of throughput, which is now handled through scaling and elasticity—the same way you find in Kubernetes. It also brings faster startup speeds at the expense of dynamic runtime behavior, which is now unnecessary overhead in immutable deployment architectures—again, like you find in Kubernetes.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Quarkus and GraalVM&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.graalvm.org/"&gt;&lt;span style="font-weight: 400;"&gt;GraalVM&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; is an ecosystem and shared runtime offering performance advantages for a variety of languages, including Java. Its ability to do &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.graalvm.org/docs/reference-manual/native-image/"&gt;&lt;span style="font-weight: 400;"&gt;ahead of time compilation&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; to create extremely optimized Java applications has made it particularly well suited for running Java in even smaller footprints than you can get with traditional JVM deployments. With the introduction of the GraalVM project a few years ago, it made a lot of sense to design Quarkus, and the many frameworks it provides, to make it possible to use with this tool. This decision provides further optimization for Quarkus applications and helps them work together seamlessly and easily, without sacrificing the rich APIs developers know and love. GraalVM has become an important part of the Quarkus story, and Red Hat is committed to its success. Red Hat sits on the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://medium.com/graalvm/announcing-the-graalvm-project-advisory-board-282223cde700"&gt;&lt;span style="font-weight: 400;"&gt;GraalVM Project Advisory Board&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; and regularly contributes features and fixes for the GraalVM community, such as improved debuggability of native images, AArch64 native image support, and continued work on supporting Java Flight Recorder (JFR).&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Red Hat recently &lt;/span&gt;&lt;a href="https://www.redhat.com/en/about/press-releases/red-hat-advances-java-kubernetes-delivers-quarkus-fully-supported-runtime-cloud-native-development"&gt;&lt;span style="font-weight: 400;"&gt;announced its support of Quarkus&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; for production use by our customers. By using the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/quarkus"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat build of Quarkus&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, our customers now have a fully supported and highly-optimized Java solution for their Kubernetes and serverless applications. Developers can also use GraalVM to compile their Quarkus apps down to native binaries, further optimizing for cloud and Kubernetes. This feature is &lt;/span&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_build_of_quarkus/1.3/html/release_notes_for_red_hat_build_of_quarkus_1.3/ref-rn-technology-preview"&gt;&lt;span style="font-weight: 400;"&gt;currently in Technical Preview&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; as we work with the GraalVM community so we can support Red Hat customers when using it with Quarkus—which brings us to Mandrel.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Mandrel&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Red Hat’s dedication to open source communities underpins its enterprise-grade support model. We believe strongly that open source innovation is critical to the success not only of Red Hat but also the communities it serves. GraalVM is a large project with many moving parts, with contributions every day from Red Hat, Oracle, and many other GraalVM community members.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;We have found that the best way to support our customers while remaining true to our open source commitment is to establish &lt;/span&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;downstream&lt;/span&gt;&lt;/i&gt;&lt;span style="font-weight: 400;"&gt; open source distributions built in concert with their upstream counterparts. You see this with downstream distributions of Linux with &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://getfedora.org/"&gt;&lt;span style="font-weight: 400;"&gt;Fedora&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; and &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.centos.org/"&gt;&lt;span style="font-weight: 400;"&gt;CentOS&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, Kubernetes with &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.okd.io/"&gt;&lt;span style="font-weight: 400;"&gt;OKD&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, and now with &lt;/span&gt;&lt;a href="https://github.com/graalvm/mandrel"&gt;&lt;span style="font-weight: 400;"&gt;Mandrel&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; as a downstream of GraalVM. These communities work hand-in-hand to advance open source technology in a way that makes sense for both. This also enables Red Hat to continue to innovate in the open, even in its productization process, with an “upstream-first” mentality, preferring not to deviate from upstream.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;For Quarkus, the important piece of GraalVM is its native-image feature that produces native executables, which is a key feature to make Java competitive in cloud-native workloads. Mandrel allows us to have GraalVM bundled on top of OpenJDK 11 in Red Hat Enterprise Linux and other OpenJDK 11 distributions. On the GraalVM side, this allows features such as the in-progress Java Flight Recorder to be supported in Mandrel sooner than GraalVM if release timing requires it. Thus, Mandrel can best be described as a distribution of a regular OpenJDK with a specially packaged GraalVM native image. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The difference for the user is minimal, but for maintainability the upstream alignment with both OpenJDK 11 and GraalVM is critical. It means that Red Hat can offer better support to customers since we have skilled engineers working within the OpenJDK and GraalVM community.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;With Mandrel, both Red Hat customers and the GraalVM community benefit from truly open development, and Red Hat can support its customers with tried-and-true mechanisms while at the same time giving back to the upstream communities it relies on for continuing to advance the state of the art in open source computing.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#038;title=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2020/06/05/mandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus/" data-a2a-title="Mandrel: A community distribution of GraalVM for the Red Hat build of Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/05/mandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus/"&gt;Mandrel: A community distribution of GraalVM for the Red Hat build of Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/zEPWxE__E8o" height="1" width="1" alt=""/&gt;</content><summary>The Java community has demonstrated time and time again its ability to evolve, improve, and adapt to meet the needs of its developers and users. Even after 25 years of language and framework choices, Java has consistently ranked in the top languages in use today due to its strong track record and capabilities in enterprise use cases. Red Hat has long been a strong leader in Java and open source so...</summary><dc:creator>Mark Little</dc:creator><dc:date>2020-06-05T07:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/05/mandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus/</feedburner:origLink></entry><entry><title>Demystifying the Event Driven Architecture - An open solution (part 3)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nqsMvAXxec4/demystifying-event-driven-architecture-an-open-solution.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-demystifying_the_event_driven_architecture_an_open_solution_part_3</id><updated>2020-06-05T07:15:17Z</updated><published>2020-06-05T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em; text-align: center;"&gt;&lt;img alt="event-driven architecture" border="0" data-original-height="530" data-original-width="800" height="212" src="https://1.bp.blogspot.com/-00SD2ZsVdbE/XtZPXc7TTjI/AAAAAAAAxNc/uuYHNqccZ5IEDWHafk1MSjetkzzFfzpiACK4BGAsYHg/w320-h212/demystifying-eda-intro.png" width="320" /&gt;&lt;/div&gt;High throughput, resiliency, scalability and speed—are you searching for a way to leverage microservice integration to handle all the event-driven communications in your growing architecture landscape?&lt;br /&gt;&lt;br /&gt;Search no further.&lt;br /&gt;&lt;br /&gt;This series of articles guides you through the world of integration using microservice architecture and specifically explores the world of Event Driven Architecture (EDA). It’s a central story to organizations moving forward into the digital world and is worth exploring as part of your strategy for continued success.&lt;br /&gt;&lt;br /&gt;The first article was introducing &lt;a href="https://www.schabell.org/2020/04/demystifying-event-driven-architecture-an-introduction.html" target="_blank"&gt;how EDA might be the right choice&lt;/a&gt; for your microservice integration solutions, with a more detailed examination of when you might not need EDA at all. The &lt;a href="https://www.schabell.org/2020/05/demystifying-event-driven-architecture-making-the-case.html" target="_blank"&gt;second article pivoted&lt;/a&gt; back to exploring use cases aligning to EDA solutions and presenting real world examples. This last article looks at the open technologies that can help you to implement an EDA architecture.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h2&gt;An open architecture&lt;/h2&gt;&lt;/div&gt;The ideal use of EDA as an integration architecture has its foundations in solid business advantages. It’s providing you with the ability to react to the continuously changing markets you operate in at near real-time. Data communications having been reduced to must milliseconds gives you abilities to make informed decisions based on up to date information across your enterprise systems. With systems now delivering on big data scalability with an EDA architecture, you’re able to ensure reliable communications with operational integrity ensuring even less downtime.&lt;br /&gt;&lt;br /&gt;So how does this look in an open EDA architecture?&lt;br /&gt;&lt;br /&gt;In this case the focus of open is leveraging open technologies for a flexible EDA architecture. Using open technologies allows for selection of best practices, most effective, standards aligned, and widely recognised solution pieces for your architecture.&lt;br /&gt;&lt;br /&gt;One of the core technologies currently being leveraged for open EDA architectures is &lt;a href="https://kafka.apache.org/" target="_blank"&gt;Apache Kafka&lt;/a&gt;, which delivers the integration layer for building real-time data streams to capture your events. Not only can you develop streaming applications, but it’s also providing the infrastructure to enable your development teams to create scalable stream processing applications. It’s powerful capability to store streaming data safely in a fault-tolerant environment completes the requirements met for most organizations today implementing an EDA architecture.&lt;br /&gt;&lt;br /&gt;When looking to modern cloud-native development and deployments, containers remain an essential component of any architecture. Combining Kafka with a container platform is essential to help with scalability, microservices, automation, and operations needs across fully automated cloud-native deployments into production.&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-kc1H0WXjw40/XtZPxJyDJkI/AAAAAAAAxNw/ivOaB_PlpnsYijL-RTXdYUOafVpB_J5VQCK4BGAsYHg/cloud-native-development-deployment-sd.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em; text-align: center;"&gt;&lt;img alt="cloud-native deployment" border="0" data-original-height="3042" data-original-width="5409" height="180" src="https://1.bp.blogspot.com/-kc1H0WXjw40/XtZPxJyDJkI/AAAAAAAAxNw/ivOaB_PlpnsYijL-RTXdYUOafVpB_J5VQCK4BGAsYHg/w320-h180/cloud-native-development-deployment-sd.png" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;While there are many views on how to design an EDA architecture, for now there are such different views and many of the decisions you need to make rely on existing architectural limitations. Maybe you have to deal with existing components that prevent full open EDA architecture adoption, but nothing prevents a hybrid path on the way to eventual open EDA architecture.&lt;br /&gt;&lt;br /&gt;In this case, it might be interesting to look closer at integration across all your channels when engaging your customers such as discussed in the &lt;a href="https://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;omnichannel architecture blueprint series&lt;/a&gt;. Another interesting aspect of any modern EDA architecture is examined in the &lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;cloud-native development blueprint series&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;What’s out there for you?&lt;/h3&gt;This article completes this series and hopefully helps you with positioning and understanding how important EDA is and how it could play a role in your solution architectures.&lt;br /&gt;&lt;br /&gt;If you’re interested in exploring EDA solutions using open source technologies, then take a look at &lt;a href="https://www.redhat.com/en/events/webinar/getting-started-event-driven-architecture-using-apache-kafka" style="text-decoration-line: none;" target="_blank"&gt;getting started with event-driven architecture using Apache Kafka&lt;/a&gt; or this free e-book on &lt;a href="https://www.redhat.com/en/resources/event-driven-applications-amq-streams-analyst-paper" style="text-decoration-line: none;" target="_blank"&gt;designing event-driven applications&lt;/a&gt;.&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iKv01JhTfoY:S0xDsI-mf80:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iKv01JhTfoY:S0xDsI-mf80:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iKv01JhTfoY:S0xDsI-mf80:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iKv01JhTfoY:S0xDsI-mf80:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/iKv01JhTfoY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nqsMvAXxec4" height="1" width="1" alt=""/&gt;</content><summary>High throughput, resiliency, scalability and speed—are you searching for a way to leverage microservice integration to handle all the event-driven communications in your growing architecture landscape? Search no further. This series of articles guides you through the world of integration using microservice architecture and specifically explores the world of Event Driven Architecture (EDA). It’s a ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-06-05T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/iKv01JhTfoY/demystifying-event-driven-architecture-an-open-solution.html</feedburner:origLink></entry></feed>
